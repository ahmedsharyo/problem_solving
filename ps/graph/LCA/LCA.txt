#include<bits/stdc++.h>
#include <ext/numeric>
using namespace std;
using namespace __gnu_cxx;
typedef long long ll;
typedef unsigned long long ull;
const double PI = 3.14159265358979323846;
char alpha[26] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
char dig[10]= {'0','1','2','3','4','5','6','7','8','9'};
void fastInOut();
int dx[] = { 0, 1, -1,  0, -1, 1,-1, 1};
int dy[] = { 1, 0,  0, -1, -1, 1, 1,-1};
int MOD=(int)1e9+7;
const int MAXN=(int)2e5+5;
ll oo=(ll)1e18;
int inf=2e9;
#define x first
#define y second
#define  pb  push_back
const int LOGMAXN=20;
// is ancestor
int N,  P[MAXN][LOGMAXN],  T[MAXN],  L[MAXN];

vector<int> a[MAXN];

void  set_lev(int i,int lev)
{
    if(L[i])return;
    L[i]=lev;
    for(auto ch:a[i])
        set_lev(ch,lev+1);
}
void pre_pro()
{
    set_lev(0,1);

    int i, j;

    for (i = 0; i < N; i++)
        for (j = 0; 1 << j < N; j++)
            P[i][j] = -1;

    for (i = 1; i < N; i++)
        P[i][0] = T[i];

    for (j = 1; 1 << j < N; j++)
        for (i = 0; i < N; i++)
            if (P[i][j - 1] != -1)
                P[i][j] = P[P[i][j - 1]][j - 1];
}

bool query( int p, int q)
{
    int log, i;
    
    for (log = 1; 1 << log <= L[p]; log++);
    log--;
    
    for (i = log; i >= 0; i--)
        if (L[p] - (1 << i) >= L[q])
            p = P[p][i];
// what changed in is_ancestor
/*
    if (p == q)
          return p;
   
  //we compute LCA(p, q) using the values in P
      for (i = log; i >= 0; i--)
          if (P[p][i] != -1 && P[p][i] != P[q][i])
              p = P[p][i], q = P[q][i];
   
      return T[p];
*/
}


int main()
{
//#ifndef ONLINE_JUDGE
    //freopen("out.txt", "wt", stdout);
//#endif
    // fastInOut();
    int u,v,q;
    scanf("%d",&N);
    for(int i=0; i<N-1; i++)
    {
        scanf("%d%d",&u,&v);
        u--,v--;
        T[v]=u;
        a[u].pb(v);
    }
    pre_pro();

    scanf("%d",&q);
    while(q--)
    {
        scanf("%d%d",&u,&v);
        u--,v--;
        if(query(v,u))printf("YES\n");
        else printf("NO\n");
    }
}

void fastInOut()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL), cout.tie(NULL);
}
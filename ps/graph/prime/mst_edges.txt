


#include<set>
#include<map>
#include<list>
#include<iomanip>
#include<cmath>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<complex>
#include<sstream>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<numeric>
#include<utility>
#include<functional>
#include<stdio.h>
#include<assert.h>
#include<memory.h>
#include<bitset>
using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define rep(i, v)       for(int i=0;i<sz(v);++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef long long         ll;
const ll OO = 1e8;

const double EPS = (1e-7);
int dcmp(double x, double y) {  return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1; }

#define pb                  push_back
#define MP                  make_pair
#define P(x)                cout<<#x<<" = { "<<x<<" }\n"
typedef long double       ld;
typedef vector<int>       vi;
typedef vector<double>    vd;
typedef vector< vi >      vvi;
typedef vector< vd >      vvd;
typedef vector<string>    vs;


struct edge {
    int from, to, w;

    edge(int from, int to, int w): from(from), to(to), w(w) {}

    bool operator < (const edge & e) const {
        return w > e.w;  // STL priority_queue need it > , or modify data -ve, or use paprmeter less
    }
};

 map<pair<int ,int >,bool>edges; // Save MST edges

 map<int ,pair<int ,int > >mp;
  map<int ,pair<int ,int > >mp1;

void PRIM_MST2(vector< vector< edge > > adjList) // O(E logV)
{   // edge x-->y & y-->x must be in the adjList
    int  n = sz(adjList);
    ll mstCost = 0;
    vi vis(n, 0);

    priority_queue<edge> q;       // 1) priority_queue to sort edges
    q.push( edge(-1, 0, 0) );

    while( !q.empty() ) {
        edge e = q.top();       q.pop();
        if( vis[e.to] ) continue;
        vis[e.to] = 1;
        mstCost += e.w;
        if(e.to)
        {
            //cout<<"heeeeeh"<<endl;
            edges[{e.from,e.to}]=1;
            

        }// 2) remove min element & update cost/list

        rep(j, adjList[ e.to]) {             // 3) Iterate on adjacent edges & add new edges, using e.to as src
            edge ne = adjList[e.to][j];
            if( !vis[ ne.to] )              // 4) If added will cause cycle
                q.push( ne );
        }
    }

}








int main()
{
//#ifndef ONLINE_JUDGE
//    freopen("c.in", "rt", stdin);
//    //freopen(".txt", "wt", stdout);
//#endif
//
int n,m;
scanf("%d%d",&n,&m);
vector< vector< edge > > adjList(n+5);
int u,v,w;
for(int i=1;i<=m;i++)
{
    scanf("%d%d%d",&u,&v,&w);
    u--,v--;
  edge e=edge(u,v,w);
  edge e1=edge(v,u,w);
  adjList[u].pb(e);
   adjList[v].pb(e1);

  mp[i]={u,v};
  mp1[i]={v,u};
}
PRIM_MST2(adjList);
int q,k,x;

scanf("%d",&q);
 while(q--)
 {
     scanf("%d",&k);
     bool v=0;
     while(k--)
     {
         scanf("%d",&x);
         pair<int,int> r,l;
         r=mp[x];
         l=mp1[x];
        // cout<<r.first<<" "<<r.second<<" **"<<l.first<<" "<<l.second<<endl;
         if(!edges[r]&&!edges[l])v=1;

     }
     if(v)puts("NO");
    else puts("YES");
 }
 
    return 0;
}

#include <bits/stdc++.h>
using namespace std;
int a[100002];
bool v[100002];

int res[100002];
vector<int>b[100002];
int n;
bool valid(int x)
{
    return x>-1&&x<n;
}

void build ()
{
    for(int i=0;i<n;i++)
    {
        int u,e;
        u=i+a[i];
        e=i-a[i];
        if(valid(u))b[u].push_back(i);
        if(valid(e))b[e].push_back(i);

    }
}
queue<int>q;
int t;


int bfs(int s)
{
    q.push(s);
    v[s]=1;
    int level=0;
    while(q.size())
    {
        int sz=q.size();
     while(sz--)
        {
            int x=q.front();
            q.pop();
            res[x]=min(res[x],level);
            for(int i=0;i<b[x].size();i++)
            {
          if(v[b[x][i]]==0)
          {
            q.push(b[x][i]);
            v[b[x][i]]=1;
          }


            }


        }
     level++;

    }

}

int main()
{
    freopen("jumping.in", "r", stdin);

   scanf("%d",&t);
   while(t--)
   {
        for(int i=0;i<100002;i++)
        {
          res[i]=(int)1e9+5;
          v[i]=0;
          b[i].clear();
        }
        while(q.size())q.pop();


       scanf("%d",&n);
       for(int i=0;i<n;i++)
        scanf("%d",&a[i]);
       build();
       bfs(n-1);
       for(int i=0;i<n;i++)
       {
           if(res[i]==(int)1e9+5)printf("-1\n");
           else
            printf("%d\n",res[i]);

       }


   }
}

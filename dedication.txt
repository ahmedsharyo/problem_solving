

dedication
 * before thinking *

- don't rush to the  thinking phase
- read *****ALL**** the problem statment including test cases, constrains everything
- ****trace all tracable given test cases *******
- take notes "clear" "spacific"  "concret"
- *** the notes u took ***
- consider bounderies and tricky cases "concretly" ***write them***
- make sure u have good understanding of the problem ***
- make sure u arn't solving another version of the problem ***
- if there is a concept in the problem statment ex.(Geometric progression) make sure u understand it concretly=

/thinking/
- ****trace all doable given test cases concretly slowly reflect on them , look at explainations creat some explainations if there's none*****
- *** the notes u took ***

- don't rush to the coding phase

** brute force ** secon = 100M Operation
- if n<13 (O!n) may pass
- is dpable "can be devided to simpler sub-problems" //long long dp[20][1<<20]; u can use bitset<20>b  //up to 20 ->  [1<<20]
  if dp can u optimize it more "think of changing the state (val vs index)
  if iterative you consider similar state of recursive method but u solve base cases, sub problems and then u solve the go(n) or dp[n] "AKA bottom up"
  in take it or leave it situation check if the leave it  requires an if condition, to generalize be careful if a choice requires an if condition
  when u leave it make sure u update from the current state correctly
  if dp[n][m] the time complexity O(n*2 * {any forloop inside the scope "{}" recursive or iterative}) ) , memory O(n * m) usually
  in 2 players game : "using dp or .. if in the player turn the player can't make a move towards a losing state so he is in a losing state
  alice wants to "maxmize" her chance of winning bob wants to minimize hers 
  don't call states that are useless, more code more bugs
  in counting (&&) -> (*) , (||) -> (+) 
  u can use bfs as dp iterative

**greedy **
- if n>= 10^5 maybe it's greedy-able
- think reversed
- if greedy make ur own test cases "small - meduim - large(write a code if necessary)"
- always be concrete
- pre-process. > on the fly
- inequality "equatons"
- in optimization problems check if there is limited scope of answars e.g [1:2], maybe BS if monotonic -> sorting 
- don't depende on one or two case, try to generlize it  
- do you want iterate twice, more than three times on the array to check cond. ?

- if it seems like it have to be done in linear time try to think greedy "itreate once maybe back and forth if needed" 
- **** if u r not sure whether ur solution is general or not u r wasting time most probably ****

** graph **
-try reconstracting the graph or building it if that helps
- min/max spanning tree? DisjointSets kruskal
*bfs vs dfs*
BFS
- if the distance is fixed on edges then bfs is more convenient.
- when u care about the level the node/s in, bfs is more convenient.
- multiple rats on distination try bfs from each rat start node, or want to reach all nodes " u start from each node" *(run one bfs)*
- u can use bfs as dp iterative

DFS
- if u need to traverse bottom up it's most probably dfs
- if it's subtree related solve the deap subtree and go up (return) "bottom up (dfs)"
- if distance in a binary tree try to calculate distance from the right and left


**BST TREE**
Try to make use of the bst properties
reverse inorder traversal if u need summation try to use public or passed by referace accumilator ex. " int sum "
- vs binary tree vs complete binary tree

**counting **
- just try multipling more than max or min it's probably more ******general ********

- if u r counting under multiple conditions try to seperate counting each case alone 
or categories some cases " divide and conquer "
- "avoid double counting"


**ad hoc**
- try the happy senarios first "simple - best case" then try to gerelize it on edge cases then normal cases
-** verify before u discard a sol **
- consider the worest case "calculate the complexity carefully" * * ** * ** * * 



*****************Writing****************************
- if you used INT_MAX be careful "intermediate overflow"
- if u have a templete use it like "bfs func"
- if (x > nb) x -= nb; becarful if "x" can't be -ve
- int x=(int)((t+EPS)*100);//work in integer domain if u can (he want 2 dig after the desimal point)
-check if angle in redians
- test all given test cases and bounderies and tricky cases
- check for intermediate overflow 
- make sure every memory access (for loop, arr-access,arr[**SIZE + ^^5^^"safer"**]) is not out of boundries access
- make sure use ***b***[**j**] ,***a***[*i*] properly
- becarful go(j(*********(+/-)***********)1)
- becareful n , m  use properly
- 0-based/ 1-based arr
undefined-behavior(UB) or RTE:
- X / 0; //UB 
- X % 0; //UB	
- s.pop() or q.pop() : check size() first
- modify - add to input arr if necessary
- don't copy much it makes u nervous ( trace each line carefully if u did)
- seg-faults/undefined behavior: may be arr out of boundries access (check stoping condition when dp "ex. f(i>=c.size())return 0;" )

*after writing*
don't use ld or ll unless it's necessary 
return 1LL*a.s*b.h>1LL*b.s*a.h; "LL"
ll x = INT_MAX+1; //intermediate overflow
manhaten dis=|x|+|y| "abs"[1,100]
"memeset- clear" 'multiple test cases'
dont forget () in equation "if needed"



***** debug with printing after few moments of tracing ******	
	when you are debuging trace each line carefully 
	concretly otherwise you are just wasting time
	check  "bounderies and tricky cases"
	large output (might be)--> Max_int? or overflow ?
     

wrong answer repeat






     








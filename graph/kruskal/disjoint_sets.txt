
struct DisjointSets
{
	int n;
	int* parent;
	int* rank;

	void Initialize(int _n)
	{
		n=_n+5;
		parent=new int[n];
		rank=new int[n];

		for(int i=0;i<n;i++)parent[i]=i,rank[i]=1;
	}
	void Destroy()
	{
		delete []parent;
		delete []rank;
	}
	int Find(int i)
	{
		if(i==parent[i])return i;
		return parent[i]=Find(parent[i]);
	}

	bool Union(int i, int j)
	{
		i=Find(i),j=Find(j);
		if(i!=j)
		{
			if(rank[i]>rank[j]) swap(i,j);
			parent[i]=j;
			if(rank[i]==rank[j])rank[j]++;
		}
		return i!=j;
	}
};


struct Edge
{
	int u, v;
	long long w;
};

bool IsBeforeEdge(Edge& a, Edge& b)
{
	return a.w<b.w;
}

    ****premutations****

// Given a permutation length, what is the ith permutation?
vector<ll> nthPerm(ll len, ll nth) {
	vector<ll> identity(len), perm(len);
	lp(i, len) identity[i] = i;
	for (int i = len - 1; i >= 0; --i) {
		ll p = nth / Fact[i];
		perm[len - 1 - i] = identity[p];
		identity.erase(identity.begin() + p);
		nth %= Fact[i];
	}
	return perm;
}


// Given a permutation, what is its index?
ll PermToIndex(vector<int> perm) {
	ll idx = 0;
	int n = sz(perm);
	for (int i = 0; i < n; ++i) {
		// Remove first, and Renumber the remaining elements to remove gaps
		idx += Fact[n-i-1] * perm[i];
		for(int j = i+1; j < n; j++)
			perm[j] -= perm[j] > perm[i];
	}
	return idx;
}

*************(
Permutations Application:
	Say we have a permutation: 	2 0 1 3
		Applying a permutation on other, aka multiplication, means to map its values according to the permutation.
		So 2 0 1 3 MEANS: 0 -map-> 2	1 -map-> 0		2 -map-> 1		3 -map-> 3
	Then
		(0 1 2 3) * (2 0 1 3) = 2 0 1 3
		(2 3 1 0) * (2 0 1 3) = 1 3 0 2
		(3 2 0 1) * (2 0 1 3) = 3 1 2 0
		(3 2 0 1) * (2 0 1 3) * (2 0 1 3) = (3 1 2 0) * (2 0 1 3) = 3 0 1 2
	Permutation Multiplication is associative, like numbers Multiplication, e.g. doesn't matter what to apply first
		For Numbers: 3 * 5 * 7 = (3 * 5) * 7 = 3 * (5 * 7)
		Then for Some Permutations: P1 * p2 * p3 * p4 = P1 * (p2 * p3 * p4) = (P1 * p2) * (p3 * p4) and so on.
	Permutation Multiplication is NOT Commutative, like numbers subtraction, e.g. order matter
		For numbers: 3-5 ~= 5-3
		Then for Permutations = (0 1 2 3) * (2 0 1 3) ~= (2 0 1 3) * (0 1 2 3)
	P^k means apply Permutation k times, e.g. (3 2 0 1) * (2 0 1 3) * (2 0 1 3) is written as: p1 * p2^2
	Say we are given P1 and P2, and we would like to evaluate p1 * p2^k, where k = 10^9?!!
		Check above, Permutation is similar in that for Numbers.
		E.g. how do you calculate a^16? we use divide and conquer: a^16 = a^8 * a^8. Calculate a^8 and square it! SAME for Permutation
		typedef vector<int> perm;
		perm pow(perm inp, perm apply, int k)
		{
			if(k == 0) // won't apply permutation, so same as input
				return inp;
			if(k == 1)
				return applyPerm(inp, apply);	// implement: (0 1 2 3) * (2 0 1 3) = 2 0 1 3
			perm = pow(inp, apply, k/2);
			cur = applyPerm(cur, cur);
			if(k%2 == 1)	// we have odd power
				cur = applyPerm(cur, perm);
			return cur;
		}
		Order? N for applyPerm * logk for depth -> O(nlogk)
		Could we do better? YES, a bit more code, but we can do it! Using Permutation Cycle Notation
Permutation Cycle Notation
	From Abstract Algebra, we know that Permutation is set of dis-joint cycles. How
		In other words, if you followed which value replace other, you create a cycle.
	Let Say we have permutation p: 1 2 3 0
		0 -> 1
		1 -> 2
		2 -> 3
		3 -> 0	// End of Cycle
	What about 3 2 1 0 4
		0 -> 3
		3 -> 0	// End of Even Cycle
		1 -> 2
		2 -> 1	// End of Even Cycle
		4 -> 4 // End of ODD Cycle, with one element
	What about 2 0 1 4 3
		0 -> 2
		2 -> 1
		1 -> 0	// End of ODD Cycle
		3 -> 4
		4 -> 3	// End of Even Cycle
	Then, any permutation is set of cycles -> this is CLUE for many permutation problems
	Let's pick a one cycle permutation, and see its application: 3 0 1 2
		0 -> 3		3 -> 2		2 -> 1		1 -> 0
	let's apply it many times over a perm p: 0 1 2 3
	(0 1 2 3) * (3 0 1 2)^1 = 3 0 1 2
	(0 1 2 3) * (3 0 1 2)^2 = 2 3 0 1	Notice, the rotation of the cycle
	(0 1 2 3) * (3 0 1 2)^3 = 1 2 3 0
	(0 1 2 3) * (3 0 1 2)^3 = 0 1 2 3	We backed again!
	Think in that, a cycle of length N, if applied N times, it backs to is origin!
		And applying a cycle N+1 	= 1 	time
							 N+2 	= 2 	times
							 2N+1	= 1 	time
							 M		= M%N 	time
	Let's think again in our problem: how to solve p1 * p2^k	and k = 10^9?
		Simply, 1) Generate Permutation Cycles (aka disjoint cycle decomposition) -> O(n)
				2) For each cycle length M, apply cycle M%N times, which is just a rotation
				3) Cleverly, implement all in O(n)
)**********
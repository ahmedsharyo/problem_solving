/*
 * 1043_GSS1.cpp
 * Another buggy code by mostafa_saad
 *
 *  Created on: Feb 13, 2009
 */

#include<set>
#include<map>
#include<list>
#include<iomanip>
#include<cmath>
#include<string>
#include<vector>
#include<queue>
#include<stack>
#include<complex>
#include<sstream>
#include<iostream>
#include<algorithm>
#include<stdio.h>
using namespace std;

#define all(v)				((v).begin()), ((v).end())
#define sz(v)				((int)((v).size()))
#define clr(v, d)			memset(v, d, sizeof(v))
#define repi(i, j, n) 		for(int i=(j);i<(int)(n);++i)
#define repd(i, j, n) 		for(int i=(j);i>=(int)(n);--i)
#define repa(v)				repi(i, 0, sz(v)) repi(j, 0, sz(v[i]))
#define rep(i, v)			repi(i, 0, sz(v))
#define lp(i, cnt)			repi(i, 0, cnt)
#define lpi(i, s, cnt)		repi(i, s, cnt)
#define P(x)				cout<<#x<<" = { "<<x<<" }\n"
#define pb					push_back
#define MP					make_pair

typedef vector<int> vi;
typedef vector<double> vd;
typedef vector<vi> vvi;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef long long ll;
typedef long double ld;

struct node {
	int left, right, mid, sum;

	node() {
	}

	node(int left, int right, int mid, int sum) :
		left(left), right(right), mid(mid), sum(sum) {
	}
};

const int MAX = 2000000;
const int TREE_SIZE = 2*65536; // log(MAX)+1 tree level
node interval[TREE_SIZE + 9];

const int MAXA = 50000 + 9;
int v[MAXA];

node merge(node a, node b) {
	node c;
	c.left = max(a.left, a.sum + b.left);
	c.right = max(b.right, b.sum + a.right);
	c.mid = max(max(a.mid, b.mid), max(a.sum + b.sum, a.right + b.left));
	c.sum = a.sum + b.sum;

	return c;
}

int S = 0, E = MAX;
// call build(0, MAX) to initialize all cells to val = 1
node build(int s = S, int e = E, int p = 1) {
	if (s == e)
		return interval[p] = node(v[s], v[s], v[s], v[s]);

	node a = build(s, (s + e) / 2, 2 * p);
	node b = build((s + e) / 2 + 1, e, 2 * p + 1);

	return interval[p] = merge(a, b);
}

int f, t;
int idx, val;

node update(int idx, int s = S, int e = E, int p = 1) {
	if (s == e)
		return interval[p] = node(v[s], v[s], v[s], v[s]);

	int mid = (s + e) / 2;

	node a = interval[2 * p];
	node b = interval[2 * p + 1];

	if(idx <= mid)
		a = update(idx, s, (s + e) / 2, 2 * p);
	else
		b = update(idx, (s + e) / 2 + 1, e, 2 * p + 1);

	return interval[p] = merge(a, b);
}

node query(int s = S, int e = E, int p = 1) {
	if (f <= s && t >= e)
		return interval[p];

	int mid = (s + e) / 2;

	if (t <= mid)
		return query(s, (s + e) / 2, 2 * p);
	if (f > mid)
		return query((s + e) / 2 + 1, e, 2 * p + 1);

	node p1 = query(s, (s + e) / 2, 2 * p);
	node p2 = query((s + e) / 2 + 1, e, 2 * p + 1);

	return merge(p1, p2);
}

int main() {
#ifndef ONLINE_JUDGE
	freopen("c.in", "rt", stdin);
#endif

	int n;
	scanf("%d", &n);

	for (int i = 1; i <= n; ++i) {
		scanf("%d", &v[i]);
	}

	build(1, n, 1);

	int qu, ty;

	scanf("%d", &qu);

	lp(i, qu) {
		scanf("%d", &ty);
		//ty = 1;

		if(ty)
		{
			scanf("%d %d", &f, &t);

			printf("%d\n", query(1, n, 1).mid);
		}
		else {
			scanf("%d %d", &idx, &val);
			v[idx] = val;
			update(idx, 1, n, 1);
		}
	}

	return 0;
}

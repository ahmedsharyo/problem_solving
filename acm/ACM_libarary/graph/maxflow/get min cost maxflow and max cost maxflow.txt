#include<bits/stdc++.h>
#include <ext/numeric>
using namespace std;
using namespace __gnu_cxx;
typedef long long ll;
typedef unsigned long long ull;
const double PI = 3.14159265358979323846;
char alpha[26] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};
char dig[10]= {'0','1','2','3','4','5','6','7','8','9'};
void fastInOut();
int dx[] = { 0, 1, -1,  0, -1, 1,-1, 1};
int dy[] = { 1, 0,  0, -1, -1, 1, 1,-1};
int MOD=(int)1e9+7;
const int N=(int)2e2+5;
ll OO=(ll)1e17;
int oo=2e8;
#define EPS 1e-7
#define x first
#define y second
#define  pb  push_back
typedef vector<int>       vi;

//get min cost maxflow and max cost maxflow
//N can be optimized to n+m+2 = #of nodes
struct edge
{
    int x, y ;
    int c;
    edge(int x, int y, int c): x(x), y(y), c(c) {}
};

vector<int> path;
int m,n,from,to,prv[N],d[N];

void buildpath(int i)
{
    path.pb(i);
    if(prv[i]==-1)return;
    buildpath(prv[i]);
}

void BellmanFord(vector<edge> a)
{
    for(int i=0; i<N; i++)d[i]=oo,prv[i]=-1;
    d[0]=0;
    bool r=0;
    for(int i=0; i<=(n+m+2)*(n+m+2); i++)//edge between all pair of nodes problem Dependant-optimizable
    {
        r=0;
        for(int j=0; j<(int)a.size(); j++)
        {
            if(d[a[j].y]>d[a[j].x]+a[j].c)
            {
                r=1;
                d[a[j].y]=d[a[j].x]+a[j].c;
                prv[a[j].y]=a[j].x;
            }
        }
        if(r==0)
            break;
    }
}

bool find_path(vector<edge> a,int dest)
{
    path.clear();
    BellmanFord(a);
    if(d[dest]==oo)return 0;
    buildpath(dest);
    return 1;
}

int cs=0;
int mcmf(vector<vi>capMax,vector<vector<int> >&costMax,int src,int dest)// can be global 
{
    int mincost=0;
    int  maxflow=0;
    while(1)
    {
        vector<edge>a;

        for(int i=0; i<N; i++)
            for(int j=0; j<N; j++)
            {
                if(capMax[i][j]>0)a.pb( edge(i, j, costMax[i][j]) );
            }

        bool v= find_path(a,dest);
        if(!v)break;
        reverse(path.begin(),path.end());
        int bottle_neck=oo;
        for(unsigned int i=1; i<path.size(); i++)
        {

            int u=path[i-1],v=path[i];
            bottle_neck=min(bottle_neck,capMax[u][v]);

        }
        for(unsigned int i=1; i<path.size(); i++)
        {
            int u=path[i-1],v=path[i];
            mincost+=bottle_neck*costMax[u][v];
            capMax[u][v]-=bottle_neck,capMax[v][u]+=bottle_neck ;
        }
        maxflow+=bottle_neck;
    }
    return mincost;
}

int main()
{
//#ifndef ONLINE_JUDGE
    //freopen("out.txt", "wt", stdout);
//#endif
    fastInOut();
    int ts=1;
    while(cin>>n>>m&&(n+m))
    {
        vector<vector<int> > cap(N, vector<int>(N,0));
        vector<vector<int> > cost(N, vector<int>(N,0));
        from=0,to=n+m+1;
        int i=1;
        int c;
        for(int j=0; j<n; j++)
        {
            cin>>c;
            cap[from][i]+=c;
            i++;
        }

        for(int j=0; j<m; j++)
        {
            cin>>c;
            cap[i][to]+=c;
            i++;
        }

        for(int j=1; j<=n; j++)
        {
            for(int k=n+1; k<=n+m; k++)
            {
                double t;
                cin>>t;
                int x=(int)((t+EPS)*100);//work in integer domain
                if(x<0)continue;
                cap[j][k]=oo;
                cost[j][k]=x;
                cost[k][j]=-x;//for edge cost cancellation
            }
        }
        int mn=mcmf(cap,cost,0,n+m+1);
         for(int i=0; i<N; i++)
            for(int j=0; j<N; j++)
            {
               cost[i][j]*=-1; //max cost maxflow
            }
        int mx=-mcmf(cap,cost,0,n+m+1);
        cout<<"Problem "<<ts++<<": "<<setprecision(2)<<fixed<<mn/100.0<<" to "<<mx/100.0<<endl;
    }
}

void fastInOut()
{
    ios_base::sync_with_stdio(0);
    cin.tie(NULL), cout.tie(NULL);
}

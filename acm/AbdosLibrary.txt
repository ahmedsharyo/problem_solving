// Returns sum of products of all subsets
// of arr[0..n-1]
int productOfSubsetSums(int arr[], int n)
{
    int ans = 1;
    for (int i = 0; i < size; ++i )
        ans = ans * (arr[i] + 1);
    return ans-1;
}


int fact(int x) {
	if(x<=1)return 1;
	return  x * fact(x - 1);
}
int solve(string s) { // return all possible permutations of the string
	int ret = 1;
	map<char, int> cnt;
	for (int i = 0; i < (int) s.size(); ++i) {
		cnt[s[i]]++;
	}
	for (char c = 'a'; c <= 'z'; ++c) {
		if (cnt[c] % 2)
			return 0;
		ret*=fact(cnt[c]);
	}
	return fact(s.size() )/ret;
}

int spf[MX + 1]; // smallest prime factor..help in prime factorization
void sieve() {
	for(int i=1;i<MX;++i) {
	    spf[i]=i;
	}
	for (int i = 2; i * i <= MX; ++i) {
		if (spf[i] == i) {
			for (int j = i * i; j <= MX; j += i) {
				spf[j] = i;
			}
		}
	}
}


long long Div[MX + 1]; // Div[i] is number of divisors of i
void sieve() {

	for (int i = 1; i <= MX; ++i)
		Div[i] = 1;
	for (int i = 2; i * i <= MX; ++i) {
		if (Div[i] == 1	) {
			Div[i]++;
			for (int j = i * 2; j <= MX; j += i) {
				int k = j;
				long long e = 0;
				while (k % i == 0)
					e++, k /= i;
				Div[j] *= (e + 1);
			}
		}
	}

}

struct DSU {
	int parent[MAXNODES];
	int sz[MAXNODES];
	DSU() {
		for (int i = 0; i < MAXNODES; ++i)
			parent[i] = i, sz[i] = 1;
	}
	int findParent(int u) {
		return parent[u] == u ? u : findParent(parent[u]);
	}
	void merge(int u, int v) {
		int p1 = findParent(u), p2 = findParent(v);
		if (p1 == p2)
			return;
		else if (sz[p1] < sz[p2]) {
			parent[p1] = p2;
			sz[p2] += sz[p1];
		} else {
			parent[p2] = p1;
			sz[p1] += sz[p2];
		}
	}
	bool same(int u, int v) {
		return findParent(u) == findParent(v);
	}
};


struct segmenTree {
	vector<long long> arr, tree, lazy;
	segmenTree(vector<long long> &a) {
		arr = a;
		tree.resize(arr.size() * 4);
		lazy.resize(tree.size());
	}
	void build(int cur, int l, int r) {
		if (l == r) {
			tree[cur] = arr[l];
			return;
		}
		int left = cur * 2, right = cur * 2 + 1, mid = (l + r) / 2;
		build(left, l, mid);
		build(right, mid + 1, r);
		tree[cur] = min(tree[left], tree[right]);
	}
	void update(int cur, int l, int r, long long val) {
		tree[cur] += val;
		lazy[cur] += val;
	}
	void shift(int cur, int l, int r) {
		// go in depth :)
		int left = cur * 2, right = cur * 2 + 1, mid = (l + r) / 2;
		update(left, l, mid, lazy[cur]);
		update(right, mid + 1, r, lazy[cur]);
		lazy[cur] = 0;
	}
	long long getMin(int cur, int l, int r, int start, int end) {
		if (l > end || r < start)
			return OO;
		if (l >= start && r <= end)
			return tree[cur];
		shift(cur, l, r);
		int left = cur * 2, right = cur * 2 + 1, mid = (l + r) / 2;
		return min(getMin(left, l, mid, start, end),
				getMin(right, mid + 1, r, start, end));
	}
	void increase(int cur, int l, int r, int start, int end, long long val) {
		if (l > end || r < start)
			return;
		if (l >= start && r <= end) {
			update(cur, l, r, val);
			return;
		}
		// go depth :V
		int left = cur * 2, right = cur * 2 + 1, mid = (l + r) / 2;
		shift(cur, l, r);
		increase(left, l, mid, start, end, val);
		increase(right, mid + 1, r, start, end, val);
		tree[cur] = min(tree[left], tree[right]);
	}
};


struct edge {
	int to;
	long long cost;
	edge(int to, long long cost) {
		this->to = to;
		this->cost = cost;
	}
};

vector<vector<edge> > adj(N);
long long dist[N];

void dijkstra(node) {
	for (int i = 0; i < n; ++i)
		dist[i] = OO;
	set<pair<long long, int> > s;
	s.insert(make_pair(0, node));
	dist[node] = 0;
	while (!s.empty()) {
		long long cost = s.begin()->first;
		int u = s.begin()->second;
		s.erase(s.begin());
		if(cost==dist[u])
		for (int i = 0; i < (int) adj[u].size(); ++i) {
			long long edgeCost = adj[u][i].cost;
			int child = adj[u][i].to;
			if (cost+edgeCost<dist[child] ) {
				dist[child] = cost + edgeCost;
				s.insert(make_pair(dist[child], child));
			}
		}
	}
}
void path(int u) {
	printf("%d ", u + 1);
	if (u + 1 == targetNode) // must start dij with this target!
		return;
	long long cost = dist[u];
	for (int i = 0; i < (int) adj[u].size(); ++i) {
		long long edgeCost = adj[u][i].cost;
		int child = adj[u][i].to;
		if(cost-edgeCost==dist[child]) {
			path(child);
			return;
		}
	}
}
void bin(int x) {
	if (x) {
		bool l = (x & 1);
		bin(x / 2);
		cout << l;
	} else
		cout << endl;
}

struct Slope {
  long long nom, den;
  Slope() {
    nom = den = 0;
  }
  Slope(long long nom, long long den) {
    this->nom = nom;
    this->den = den;
    long long gcd = __gcd(nom, den);
    this->nom /= gcd;
    this->den /= gcd;
    if (this->den < 0 && this->nom > 0) {
      this->nom *= -1;
      this->den *= -1;
    }
    if (this->nom == 0)
      this->den = 1;
    if (this->den == 0)
      this->nom = 1;
  }
};


int CeilIndex(vector<int> &v, int l, int r, int key) {
    while (r-l > 1) {
    int m = l + (r-l)/2;
    if (v[m] >= key)
        r = m;
    else
        l = m;
    }

    return r;
}

int LongestIncreasingSub(vector<int>& v) {
    if (v.size() == 0)
        return 0;

    std::vector<int> tail(v.size(), 0);
    int length = 1; // always points empty slot in tail

    tail[0] = v[0];
    for (size_t i = 1; i < v.size(); i++) {
        if (v[i] < tail[0])
            // new smallest value
            tail[0] = v[i];
        else if (v[i] > tail[length-1])
            // v[i] extends largest subsequence
            tail[length++] = v[i];
        else
            // v[i] will become end candidate of an existing subsequence or
            // Throw away larger elements in all LIS, to make room for upcoming grater elements than v[i]
            // (and also, v[i] would have already appeared in one of LIS, identify the location and replace it)
            tail[CeilIndex(tail, -1, length-1, v[i])] = v[i];
    }
